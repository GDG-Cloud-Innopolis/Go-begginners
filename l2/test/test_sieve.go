package test

import (
	"fmt"
	"reflect"
	"testing"
)

func matchString(a, b string) (bool, error) {
	return a == b, nil
}

// Sieve is a function to test a sieve of Eratosthenes function
func Sieve(SieveOfEratosthenes func(n int) []int) {
	testSieve := func(t *testing.T) {
		tests := []struct {
			n    int
			want []int
		}{
			{
				n:    10,
				want: []int{2, 3, 5, 7},
			},
			{
				n:    20,
				want: []int{2, 3, 5, 7, 11, 13, 17, 19},
			},
			{
				n:    100,
				want: []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97},
			},
			{
				n:    200,
				want: []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199},
			},
			{
				n:    300,
				want: []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293},
			},
			{
				n:    400,
				want: []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397},
			},
			{
				n:    500,
				want: []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499},
			},
		}
		for _, tt := range tests {
			name := fmt.Sprintf("Prime numbers until %d", tt.n)
			t.Run(name, func(t *testing.T) {
				t.Log()
				got := SieveOfEratosthenes(tt.n)
				if !reflect.DeepEqual(tt.want, got) {
					t.Errorf("Expected: %v, got: %v", tt.want, got)
				}
			})
		}
	}
	testSuite := []testing.InternalTest{
		{
			Name: "TestSieve",
			F:    testSieve,
		},
	}

	testing.Main(matchString, testSuite, nil, nil)
}
