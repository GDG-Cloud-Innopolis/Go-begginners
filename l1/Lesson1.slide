Go Beginners Innopolis 
Занятие 1: Введение
6 Feb 2020
Tags: go, innopolis

Emil Sharifullin
Senior Software Engineer, SKB Kontur
iam@litleleprikon.me
@litleleprikon

* Кто я такой?

- Go разработчик в компании СКБ Контур
- +/- 7 Лет опыта промышленной разработки
- Делаю доклады по го и другим языкам

.image img/me.png _ 500

* Язык Go

*Go* — компилируемый многопоточный язык программирования, разработанный внутри компании Google Разработка Go началась в сентябре 2007 года, его непосредственным проектированием занимались Роберт Гризмер, Роб Пайк и Кен Томпсон, занимавшиеся до этого проектом разработки операционной системы Inferno. Официально язык был представлен в ноябре 2009 года. На данный момент поддержка официального компилятора, разрабатываемого создателями языка, осуществляется для операционных систем FreeBSD, OpenBSD, Linux, macOS, Windows, DragonFly BSD, Plan 9, Solaris, Android, AIX. Также Go поддерживается набором компиляторов gcc, существует несколько независимых реализаций. Ведётся разработка второй версии языка.

.image img/go-logo.png 200 _

* Проекты, написанные на Go

- Docker
- Kubernetes
- Prometheus
- etcd
- Consul
- Terraform
- Moira Alert

* Hello world

.play src/hello/main.go

    go run main.go

* Рассмотрим подробнее

    package main

*Определение* *пакета* - Любая Go программа должна начинаться с определения имени пакета. Пакеты — это подход Go к организации и повторному использованию кода.


    import "fmt"

*Подключение* *сторонних* *пакетов* - Ключевое слово import позволяет подключить сторонние пакеты для использования их функциональности в нашей программе.

    // this is a comment

*Комментарий* - Комментарии игнорируются компилятором Go и служат пояснениями исключительно для вас. Go поддерживает два вида комментариев: `//` превращает в комментарий весь текст до конца строки и `/*` `*/`, где комментарием является всё, что содержится между символами `*`.


* Рассмотрим подробнее

    func main() {
        ...
    }

*Объявление* *функции* - Функции являются кирпичиками программы на Go. Они имеют входы, выходы и ряд действий, называемых операторами, расположенных в определенном порядке. 

    fmt.Println("Hello World")

*Вызов* *функции* - Эта строка содержит три части: доступ к функции пакета fmt под названием Println (Print line), затем создание новой строки, содержащей Hello World, и вызов функции с этой строкой в качестве первого и единственного аргумента.

* Типы

Типы позволяют определять сущность данных, определяют множество принимаемых значений, описывают, какие операции могут быть применены к ним, и определяют, как данные будут храниться.

*01000111* *01101111* - Go
*01000111* *01101111* - 18287

Go — это язык программирования со статической типизацией. Это означает, что переменные всегда имеют определенный тип и этот тип нельзя изменить. 

* Целые числа

*Целые* *числа*, точно так же, как их математические коллеги, — это числа без вещественной части. В информатике числа конечны. Лимит чисел зависит от количества памяти, выделенной для числа.

Целые числа в Go бывают:

- *uint8* - Целое беззнаковое 8 бит. [ 0 : 255 ]
- *uint16* - Целое беззнаковое 16 бит. [ 0 : 65535 ]
- *uint32* - Целое беззнаковое 32 бит. [ 0 : 4294967295 ]
- *uint64* - Целое беззнаковое 64 бит. [ 0 : 18446744073709551615 ]
- *int8* - Целое знаковое 8 бит. [ -128 : 127 ]
- *int16* - Целое знаковое 16 бит. [ -32768 : 32767 ]
- *int32* - Целое знаковое 32 бит. [ -2147483648 : 2147483647 ]
- *int64* - Целое знаковое 64 бит.  [ -9223372036854775808 : 9223372036854775807 ]

* Числа с плавающей точкой

Числа с плавающей точкой — это числа, которые содержат вещественную часть (вещественные числа) (1.234, 123.4, 0.00001234, 12340000). Их представление в компьютере довольно сложно и не особо необходимо для их использования. Так что мы просто должны помнить:

- Числа с плавающей точкой неточны. Бывают случаи, когда число вообще нельзя представить. Например, результатом вычисления 1.01 - 0.99 будет 0.020000000000000018 - число очень близкое к ожидаемому, но не то же самое.

- Как и целые числа, числа с плавающей точкой имеют определенный размер (32 бита или 64 бита). Использование большего размера увеличивает точность (сколько цифр мы можем использовать для вычисления)

- В дополнение к числам существуют несколько других значений, таких как: «not a number» (не число) (NaN, для вещей наподобие 0/0), а также положительная и отрицательная бесконечность (+∞ и −∞).

* Числа с плавающей точкой

В Go есть два вещественных типа: *float32* и *float64* (соответственно, часто называемые вещественными числами с одинарной и двойной точностью). А также два дополнительных типа для представления комплексных чисел (чисел с мнимой частью): *complex64* и *complex128*. Как правило, мы должны придерживаться типа *float64*, когда работаем с числами с плавающей точкой.

* Операции с числами

- *+*	сложение
- *-*	вычитание
- ***	умножение
- */*	деление
- *%*	остаток от деления

* Пример

.play src/types/numbers/main.go

* Строки

*Строка* — это последовательность символов определенной длины, используемая для представления текста.

Строковые литералы могут быть созданы с помощью двойных кавычек *"Hello* *World"* или с помощью апострофов *`Hello* *World`*. Различие между ними в том, что строки в двойных кавычках не могут содержать новые строки и они позволяют использовать особые управляющие последовательности символов. Например, *\n* будет заменена символом новой строки, а *\t* - символом табуляции.

* Пример

.play src/types/strings/main.go

* Логические типы

*Логический* *тип* *данных*, или булев тип, или булевый тип (от англ. Boolean или logical data type) — примитивный тип данных в информатике, принимающий два возможных значения, иногда называемых истиной (*true*) и ложью (*false*). С этим типом используются три логических оператора:

- *&&*	И
- *||*	ИЛИ
- *!*	НЕ

* Пример

.play src/types/bools/main.go

* Переменные

*Переменная* - это именованное место хранения какого-то типа данных.

Переменным можно присваивать значения а так же использовать это значение далее.

У переменных есть тип, который не может быть изменен.

* Пример

.play src/vars/definition/first/main.go

* Пример

Переменные в Go похожи на переменные в алгебре, но есть несколько различий. Во-первых, когда мы видим символ =, то по привычке читаем его как «х равен строке Hello World». Нет ничего неверного в том, чтобы читать программу таким образом, но лучше читать это как «х принимает значение строки Hello World»

.play src/vars/definition/second/main.go

* Пример

.play src/vars/definition/third/main.go

* Пример

Запись x = x + y настолько часто встречается в программировании, что в Go есть специальный оператор присваивания +=. Мы можем записать x = x + "second" как x += "second", и результат будет тем же (прочие операторы могут быть использованы подобным же образом).

.play src/vars/definition/fourth/main.go

* Равенство

Другое отличие между Go и алгеброй в том, что для равенства используется другой символ: *==* (два знака равно, один за другим). *==* - это оператор. Как и +, он возвращает логический тип. Например:

.play src/vars/equality/main.go

* Сокращенная запись

Если мы хотим присвоить значение переменной при её создании, то можем использовать сокращенную запись:

.play src/vars/definition/fifth/main.go

* Определение нескольких переменных

В Go существует еще одно сокращение на случай, если необходимо определить несколько переменных:

.play src/vars/definition/sixth/main.go

* Имя переменных

Правильное именование переменных — важная часть разработки ПО. Имена должны начинаться с буквы и могут содержать буквы, цифры и знак _ (знак подчеркивания). Компилятору Go, в принципе, всё равно, как вы назовете переменную, но не забудьте, что вам (и может быть кому-то еще) потом это придется читать. Предположим, у нас есть:

    x := "Max"
    fmt.Println("My dog's name is", x)

Название `x` не отражает суть данной переменной

    name := "Max"
    fmt.Println("My dog's name is", name)

Уже лучше, но можно еще лучше

    dogsName := "Max"
    fmt.Println("My dog's name is", dogsName)

* Область видимости
Область видимости (англ. scope) в программировании — часть программы, в пределах которой идентификатор, объявленный как имя некоторой программной сущности (обычно — переменной, типа данных или функции), остаётся связанным с этой сущностью, то есть позволяет посредством себя обратиться к ней. Говорят, что идентификатор объекта «виден» в определённом месте программы, если в данном месте по нему можно обратиться к данному объекту. За пределами области видимости тот же самый идентификатор может быть связан с другой переменной или функцией, либо быть свободным (не связанным ни с какой из них). Область видимости может, но не обязана совпадать с областью существования объекта, с которым связано имя.

* Пример

.play src/vars/scope/first/main.go

* Пример

.play src/vars/scope/second/main.go

* Пример

.play src/vars/scope/third/main.go

* Константы

Go также поддерживает константы. Константы — это переменные, чьи значения не могут быть изменены после инициализации. Они создаются таким же образом, как и переменные, только вместо var используется ключевое слово const:

.play src/const/main.go

* Задание

Дописать программу поиска корней квадратного уравнения.

.image img/d.png
.image img/x.png

.link https://play.golang.org/p/1Jf-y7_Fy8j https://play.golang.org/p/1Jf-y7_Fy8j

.image img/qr.png 250 _
